/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import * as Starter from "../../../index";

export declare namespace StyleGuides {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class StyleGuides {
    constructor(protected readonly _options: StyleGuides.Options) {}

    /**
     * @param {StyleGuides.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.styleGuides.getStyleGuides()
     */
    public async getStyleGuides(requestOptions?: StyleGuides.RequestOptions): Promise<unknown> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "v1/style-guides",
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "startersdk",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "startersdk/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StarterError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StarterError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StarterTimeoutError("Timeout exceeded when calling GET /v1/style-guides.");
            case "unknown":
                throw new errors.StarterError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {StyleGuides.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.styleGuides.createStyleGuide()
     */
    public async createStyleGuide(requestOptions?: StyleGuides.RequestOptions): Promise<unknown> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "v1/style-guides",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "startersdk",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "startersdk/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.StarterError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StarterError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StarterTimeoutError("Timeout exceeded when calling POST /v1/style-guides.");
            case "unknown":
                throw new errors.StarterError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} styleGuideId
     * @param {StyleGuides.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Starter.UnprocessableEntityError}
     *
     * @example
     *     await client.styleGuides.getStyleGuide("style_guide_id")
     */
    public async getStyleGuide(styleGuideId: string, requestOptions?: StyleGuides.RequestOptions): Promise<unknown> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/style-guides/${encodeURIComponent(styleGuideId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "startersdk",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "startersdk/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Starter.UnprocessableEntityError(_response.error.body as Starter.HttpValidationError);
                default:
                    throw new errors.StarterError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StarterError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StarterTimeoutError(
                    "Timeout exceeded when calling GET /v1/style-guides/{style_guide_id}.",
                );
            case "unknown":
                throw new errors.StarterError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} styleGuideId
     * @param {StyleGuides.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Starter.UnprocessableEntityError}
     *
     * @example
     *     await client.styleGuides.updateStyleGuide("style_guide_id")
     */
    public async updateStyleGuide(styleGuideId: string, requestOptions?: StyleGuides.RequestOptions): Promise<unknown> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/style-guides/${encodeURIComponent(styleGuideId)}`,
            ),
            method: "PUT",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "startersdk",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "startersdk/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Starter.UnprocessableEntityError(_response.error.body as Starter.HttpValidationError);
                default:
                    throw new errors.StarterError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StarterError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StarterTimeoutError(
                    "Timeout exceeded when calling PUT /v1/style-guides/{style_guide_id}.",
                );
            case "unknown":
                throw new errors.StarterError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} styleGuideId
     * @param {StyleGuides.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Starter.UnprocessableEntityError}
     *
     * @example
     *     await client.styleGuides.deleteStyleGuide("style_guide_id")
     */
    public async deleteStyleGuide(styleGuideId: string, requestOptions?: StyleGuides.RequestOptions): Promise<unknown> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `v1/style-guides/${encodeURIComponent(styleGuideId)}`,
            ),
            method: "DELETE",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "startersdk",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "startersdk/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Starter.UnprocessableEntityError(_response.error.body as Starter.HttpValidationError);
                default:
                    throw new errors.StarterError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.StarterError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.StarterTimeoutError(
                    "Timeout exceeded when calling DELETE /v1/style-guides/{style_guide_id}.",
                );
            case "unknown":
                throw new errors.StarterError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
