/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as acrolinx from "../../../index";
import * as fs from "fs";
import { Blob } from "buffer";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace StyleRewrites {
    export interface Options {
        environment?: core.Supplier<environments.acrolinxEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

/**
 * Includes all information from style suggestions, plus a rewrite of the text.
 */
export class StyleRewrites {
    constructor(protected readonly _options: StyleRewrites.Options) {}

    /**
     * Start a rewrite run for one or many files. Returns a workflow ID for each file.
     *
     * @param {File | fs.ReadStream | Blob} file_upload
     * @param {acrolinx.StyleRewritesCreateStyleRewriteRequest} request
     * @param {StyleRewrites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link acrolinx.UnprocessableEntityError}
     * @throws {@link acrolinx.InternalServerError}
     *
     * @example
     *     await client.styleRewrites.createStyleRewrite(fs.createReadStream("/path/to/your/file"), {})
     */
    public createStyleRewrite(
        file_upload: File | fs.ReadStream | Blob,
        request: acrolinx.StyleRewritesCreateStyleRewriteRequest,
        requestOptions?: StyleRewrites.RequestOptions,
    ): core.HttpResponsePromise<acrolinx.WorkflowResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createStyleRewrite(file_upload, request, requestOptions));
    }

    private async __createStyleRewrite(
        file_upload: File | fs.ReadStream | Blob,
        request: acrolinx.StyleRewritesCreateStyleRewriteRequest,
        requestOptions?: StyleRewrites.RequestOptions,
    ): Promise<core.WithRawResponse<acrolinx.WorkflowResponse>> {
        const _request = await core.newFormData();
        await _request.appendFile("file_upload", file_upload);
        if (request.dialect != null) {
            _request.append("dialect", request.dialect);
        }

        if (request.tone != null) {
            _request.append("tone", request.tone);
        }

        if (request.style_guide != null) {
            _request.append("style_guide", request.style_guide);
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.acrolinxEnvironment.Production,
                "v1/style/rewrites",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "acrolinx",
                "X-Fern-SDK-Version": "0.0.30",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as acrolinx.WorkflowResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new acrolinx.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new acrolinx.InternalServerError(
                        _response.error.body as acrolinx.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.acrolinxError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.acrolinxError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.acrolinxTimeoutError("Timeout exceeded when calling POST /v1/style/rewrites.");
            case "unknown":
                throw new errors.acrolinxError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get the results of a rewrite run.
     *
     * @param {string} workflowId
     * @param {StyleRewrites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link acrolinx.NotFoundError}
     * @throws {@link acrolinx.UnprocessableEntityError}
     *
     * @example
     *     await client.styleRewrites.getStyleRewrite("workflow_id")
     */
    public getStyleRewrite(
        workflowId: string,
        requestOptions?: StyleRewrites.RequestOptions,
    ): core.HttpResponsePromise<acrolinx.StyleRewritesGetStyleRewriteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getStyleRewrite(workflowId, requestOptions));
    }

    private async __getStyleRewrite(
        workflowId: string,
        requestOptions?: StyleRewrites.RequestOptions,
    ): Promise<core.WithRawResponse<acrolinx.StyleRewritesGetStyleRewriteResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.acrolinxEnvironment.Production,
                `v1/style/rewrites/${encodeURIComponent(workflowId)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "acrolinx",
                "X-Fern-SDK-Version": "0.0.30",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as acrolinx.StyleRewritesGetStyleRewriteResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new acrolinx.NotFoundError(
                        _response.error.body as acrolinx.ErrorResponse,
                        _response.rawResponse,
                    );
                case 422:
                    throw new acrolinx.UnprocessableEntityError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.acrolinxError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.acrolinxError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.acrolinxTimeoutError(
                    "Timeout exceeded when calling GET /v1/style/rewrites/{workflow_id}.",
                );
            case "unknown":
                throw new errors.acrolinxError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
