/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as acrolinx from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace StyleChecks {
    export interface Options {
        environment?: core.Supplier<environments.acrolinxEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class StyleChecks {
    constructor(protected readonly _options: StyleChecks.Options = {}) {}

    /**
     * @param {acrolinx.CreateStyleCheckV1StyleChecksPostRequest} request
     * @param {StyleChecks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link acrolinx.UnprocessableEntityError}
     *
     * @example
     *     await client.styleChecks.createStyleCheck({
     *         document_id: "document_id"
     *     })
     */
    public createStyleCheck(
        request: acrolinx.CreateStyleCheckV1StyleChecksPostRequest,
        requestOptions?: StyleChecks.RequestOptions,
    ): core.HttpResponsePromise<unknown> {
        return core.HttpResponsePromise.fromPromise(this.__createStyleCheck(request, requestOptions));
    }

    private async __createStyleCheck(
        request: acrolinx.CreateStyleCheckV1StyleChecksPostRequest,
        requestOptions?: StyleChecks.RequestOptions,
    ): Promise<core.WithRawResponse<unknown>> {
        const { document_id: documentId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["document_id"] = documentId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.acrolinxEnvironment.Production,
                "v1/style/checks",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "acrolinx",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "acrolinx/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new acrolinx.UnprocessableEntityError(
                        _response.error.body as acrolinx.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.acrolinxError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.acrolinxError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.acrolinxTimeoutError("Timeout exceeded when calling POST /v1/style/checks.");
            case "unknown":
                throw new errors.acrolinxError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} workflowId
     * @param {acrolinx.GetStyleCheckV1StyleChecksWorkflowIdGetRequest} request
     * @param {StyleChecks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link acrolinx.UnprocessableEntityError}
     *
     * @example
     *     await client.styleChecks.getStyleCheck("workflow_id", {
     *         document_id: "document_id"
     *     })
     */
    public getStyleCheck(
        workflowId: string,
        request: acrolinx.GetStyleCheckV1StyleChecksWorkflowIdGetRequest,
        requestOptions?: StyleChecks.RequestOptions,
    ): core.HttpResponsePromise<acrolinx.StyleCheckResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getStyleCheck(workflowId, request, requestOptions));
    }

    private async __getStyleCheck(
        workflowId: string,
        request: acrolinx.GetStyleCheckV1StyleChecksWorkflowIdGetRequest,
        requestOptions?: StyleChecks.RequestOptions,
    ): Promise<core.WithRawResponse<acrolinx.StyleCheckResponse>> {
        const { document_id: documentId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["document_id"] = documentId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.acrolinxEnvironment.Production,
                `v1/style/checks/${encodeURIComponent(workflowId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "acrolinx",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "acrolinx/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as acrolinx.StyleCheckResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new acrolinx.UnprocessableEntityError(
                        _response.error.body as acrolinx.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.acrolinxError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.acrolinxError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.acrolinxTimeoutError(
                    "Timeout exceeded when calling GET /v1/style/checks/{workflow_id}.",
                );
            case "unknown":
                throw new errors.acrolinxError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
